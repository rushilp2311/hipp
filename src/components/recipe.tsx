/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/1n2EAPbpBcp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  PopoverTrigger,
  PopoverContent,
  Popover,
} from "@/components/ui/popover";
import {
  CommandInput,
  CommandEmpty,
  CommandItem,
  CommandGroup,
  Command,
  CommandList,
} from "@/components/ui/command";

import { ArrowRight, Check, Loader2 } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import { useState } from "react";
import { DEFAULT_DIET_PREFERENCE, DEFAULT_INGREDIENTS } from "@/lib/utils";
import { getRecipes } from "@/lib/action";
import { useToast } from "@/components/ui/use-toast";

export function Recipe() {
  const { toast } = useToast();

  const [ingredients, setIngredients] = useState(DEFAULT_INGREDIENTS);
  const [selectedIngredients, setSelectedIngredients] = useState<string[]>([]);

  const [customIngredient, setCustomIngredient] = useState("");

  const [dietPreferences, _] = useState(DEFAULT_DIET_PREFERENCE);
  const [selectedDietPreferences, setSelectedDietPreferences] = useState<
    string[]
  >([]);

  const [noOfServings, setNoOfServings] = useState(2);

  const [loading, setLoading] = useState(false);

  const [result, setResult] = useState("");

  const selectIngredients = (ingredient: any) => {
    if (selectedIngredients.includes(ingredient)) {
      setSelectedIngredients((prev) =>
        Array.from(new Set([...prev].filter((x) => x !== ingredient)))
      );
    } else {
      setSelectedIngredients((prev) =>
        Array.from(new Set([...prev, ingredient]))
      );
    }
  };

  const selectDietPreferences = (dietPref: any) => {
    if (selectedDietPreferences.includes(dietPref)) {
      setSelectedDietPreferences((prev) =>
        Array.from(new Set([...prev].filter((x) => x !== dietPref)))
      );
    } else {
      setSelectedDietPreferences((prev) =>
        Array.from(new Set([...prev, dietPref]))
      );
    }
  };

  const addCustomIngredient = () => {
    if (!customIngredient) {
      toast({
        title: "Empty Custom Ingredient",
        description: "Custom Ingredient can't be empty",
        variant: "destructive",
      });
      return;
    }

    if (ingredients.includes(customIngredient)) {
      toast({
        title: "Duplicate Ingredient",
        description: "Ingredient already exists.",
        variant: "destructive",
      });
      return;
    }

    setIngredients((prev) => [...prev, customIngredient]);
    setCustomIngredient("");
  };

  const generateRecipe = async (e: any) => {
    setLoading(true);
    e.preventDefault();
    if (selectedDietPreferences.length < 1 || selectedIngredients.length < 1) {
      toast({
        title: "Empty Ingredients or Dietary Preference",
        description: "Please select ingredients and dietary preferences",
        variant: "destructive",
      });
      setLoading(false);
      return;
    }

    try {
      const res = await getRecipes({
        ingredients: selectedIngredients.join(","),
        dietPreferences: selectedDietPreferences.join(","),
        noOfServings: noOfServings,
      });

      if (res) {
        setResult(res.replace(/(\r\n|\n|\r)/gm, ""));
      }
    } catch (err: any) {
      toast({
        title: "Something went wrong",
        description: err?.message,
        variant: "destructive",
      });
    }

    setLoading(false);
  };

  const getResultData = () => {
    if (loading)
      return (
        <div className="w-full h-full flex justify-center items-center">
          <Loader2 className="w-5 h-5 animate-spin" />
        </div>
      );

    if (result) return <div dangerouslySetInnerHTML={{ __html: result }} />;

    return <p>Please select your preference and generate recipe.</p>;
  };

  const handleReset = () => {
    setLoading(false);
    setSelectedIngredients([]);
    setSelectedDietPreferences([]);
    setCustomIngredient("");

    setIngredients(DEFAULT_INGREDIENTS);

    setNoOfServings(2);
  };

  return (
    <div className="flex flex-col md:flex-row gap-8 max-w-6xl mx-auto px-4 py-12">
      <div className="flex-1 space-y-6">
        <h1 className="text-3xl font-bold">Recipe Generator</h1>
        <p className="text-gray-500 dark:text-gray-400">
          Create your perfect recipe by selecting ingredients and dietary
          preferences.
        </p>
        <form className="space-y-4">
          <div>
            <Label className="font-medium" htmlFor="ingredients">
              Ingredients
            </Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-between"
                  role="combobox"
                  variant="outline"
                >
                  {selectedIngredients.length > 0
                    ? selectedIngredients.join(",")
                    : "Select ingredients..."}
                  <ChevronsUpDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full p-0">
                <Command>
                  <CommandInput
                    className="h-9"
                    placeholder="Search ingredients..."
                  />
                  <CommandEmpty>No ingredients found.</CommandEmpty>
                  <CommandGroup>
                    <CommandList>
                      {ingredients.map((ingredient) => (
                        <CommandItem
                          className="cursor-pointer"
                          key={ingredient}
                          onSelect={selectIngredients}
                        >
                          {selectedIngredients.includes(ingredient) && (
                            <Check className="w-4 h-4 mr-2 text-green-500" />
                          )}{" "}
                          {ingredient}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                  <div className="border-t flex justify-between  border-gray-200 dark:border-gray-800 p-2">
                    <Input
                      value={customIngredient}
                      onChange={(e) => setCustomIngredient(e.target.value)}
                      className="w-3/4 bg-transparent border-none focus:ring-0"
                      placeholder="Add custom ingredient"
                      type="text"
                    />
                    <Button
                      disabled={!customIngredient}
                      className="rounded-full"
                      size="icon"
                      variant="outline"
                      onClick={addCustomIngredient}
                    >
                      <ArrowRight className="w-4 h-4" />
                      <span className="sr-only">Add a new Ingredient</span>
                    </Button>
                  </div>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
          <div>
            <Label className="font-medium" htmlFor="dietary-preference">
              Dietary Preference
            </Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  className="w-full justify-between"
                  role="combobox"
                  variant="outline"
                >
                  {selectedDietPreferences.length > 0
                    ? selectedDietPreferences.join(",")
                    : "Select dietary preference..."}

                  <ChevronsUpDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full p-0">
                <Command>
                  <CommandInput
                    className="h-9"
                    placeholder="Search dietary preferences..."
                  />
                  <CommandEmpty>No dietary preferences found.</CommandEmpty>
                  <CommandGroup>
                    <CommandList>
                      {dietPreferences.map((dietPref) => (
                        <CommandItem
                          className="cursor-pointer"
                          key={dietPref}
                          onSelect={selectDietPreferences}
                        >
                          {selectedDietPreferences.includes(dietPref) && (
                            <Check className="w-4 h-4 mr-2 text-green-500" />
                          )}{" "}
                          {dietPref}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
          <div>
            <Label className="font-medium" htmlFor="servings">
              Number of Servings
            </Label>
            <Select defaultValue={noOfServings.toString()}>
              <SelectTrigger className="w-24">
                <SelectValue placeholder="Select" />
              </SelectTrigger>
              <SelectContent>
                {[2, 4, 6, 8, 10].map((serving) => (
                  <SelectItem
                    value={serving.toString()}
                    key={serving}
                    onClick={() => setNoOfServings(serving)}
                  >
                    {serving}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="flex justify-between items-center">
            <Button variant="outline" onClick={handleReset}>
              Reset
            </Button>
            <div className="flex items-center gap-2">
              <Button onClick={generateRecipe}>Generate Recipe</Button>
            </div>
          </div>
        </form>
      </div>
      <div className="flex-1 space-y-6">
        <h1 className="text-3xl font-bold">Your Recipe</h1>
        <div className="border rounded-lg overflow-hidden">
          <div className="grid items-stretch">
            <div className="grid items-center p-4 gap-4 bg-gray-100 border-b dark:bg-gray-800 border-gray-200">
              <h2 className="text-xl font-bold" />
            </div>
            <div
              className="p-4 text-sm prose dark:prose-invert
  prose-h1:font-bold prose-h1:text-xl
  prose-a:text-blue-600 prose-p:text-justify prose-img:rounded-xl
  prose-headings:underline"
            >
              {/* NOTE: Not a good practice. */}
              {getResultData()}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function ChevronsUpDownIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m7 15 5 5 5-5" />
      <path d="m7 9 5-5 5 5" />
    </svg>
  );
}

function RefreshCwIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
      <path d="M21 3v5h-5" />
      <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
      <path d="M8 16H3v5" />
    </svg>
  );
}
